ChangeLog for CloudScheduling project
==================================================


2012-10-18  Lipu Fei  Started this project.
==================================================
Changes:
1. A scheduling framework has been created seems fine so far.

Finished Works:
1. The scheduling framework has been simply tested.
2. The module org.cloudability.util.CloudConfig has been simply tested.

Todos:
1. Finish implementing the Job execution procedure. SSH modules in KOALA may be
   needed.
2. Create a more general job allocation policy framework for the scheduler.
3. Create a more general resouce provisioning policy framework.
4. Integrate the XML-RPC modules previous implemented into this project.
5. Integrate the request listening modules.
6. Design and implement a JSDL parser.

Notes:
1. The Job's execution procedure can first be implemented in a simplified way
   which can satisfy the needs of in4392 lab. Then to think of a more general
   way.
2. Implementing a flexible framework for resource provisioning policies seems
   to be very difficult and complicated. So far, this framework is sufficient
   for the in4392 lab.
3. JSDL parser can wait. It is better to design and create a simple job
   description file format for submitting job, which can be utilized for in4392
   lab.


2012-10-19  Lipu Fei
==================================================
Fixes:
1. Job's equals() function was not correct.

Changes:
1. Implemented equals() for VMInstance.
2. Assigning a VM instance to a job is now moved from JobMonitor to the
   allocator. It is allocator's responsibilty to get a job and a VM instance.
3. A sort() has been implemented for JobQueue to sort the queue with a given
   comparator.
4. A base class of allocation policies has been implemented. A FCFSAllocator and
   a helper class FCFSJobComparator have been implemented.
5. Attribute arrivalTime has been added to Job.
6. Provisioner, a base class for provisioning policies has been implemented. A
   simple static provision policy has been implemented. 
7. The allocation and provisioning logic has been moved from Scheduler to
   Allocator.

Todos:
1. Add a finialization method for ResourceManager to stop the provisioning
   policy thread.
2. Integrate the Cloud Manipulators into this framework and complete the static
   provisioning policy with it.
3. Pofiler.
4. Integrate Request Handler.


2012-10-22  Lipu Fei
==================================================
Changes:
1. A simple profiler has been added.
2. The stopping of provisioner has been added in the resource manager.
3. Client request handling modules have been added.
4. A simple request parser has been implemented.
5. Cloud broker has been added.

Todos:
1. Test them.


2012-10-23  Lipu Fei
==================================================
Changes:
1. The scheduling procedure has been changed. Now the scheduler first checks for
   available VM instance and then gets a job, because it makes no sense to
   allocate a job with no idle VM instance available.
2. The job now has a hashmap that contains all related parameters it needs.
3. Ported and tested the SSH module in KOALA.
4. Started implementing the job execution procedure.
5. 

Todos:
1. For now, the scheduler doesn't keep track on each job and its monitor, and
   the finalization of the scheduler simply does nothing. It would be better to
   keep track on the monitors, so that when an exit signal has been raised, the
   scheduler can stop these monitors and their jobs gracefully.
2. The uploading and downloading of files during the job execution are simple
   blocking methods. There may be a better and more efficient way to do this.
3. Change the authentication of SSH module to using username and password
   instead of using known database, because VM instances are created dynamically
   and you don't always have them in you known_hosts.
4. Find a good way to monitor the VM instances.


2012-10-24  Lipu Fei
==================================================
Changes:
1. The full execution procedure of the job has been implemented and tested.
2. Now the command of executing the program using ANT file build.xml is
   "ant CloudAbility". The old one was "ant CloudAbility (1)" because of some
   eclipse launch configuration problems. Now this is fixed.
3. The OpenNebula moudle has been integrated into the project.
4. Full automation has been nearly achieved.
5. A regular check method has been added to the ResourceManager.
6. Now VM instances are created through VMAgents, independent threads that are
   responsible for allocating VMs and monitoring them until they are ready to
   be used.
7. The shutdown of the system is more graceful then before: it will stop all
   existing VMAgents and then finalizes all allocated VM instances.

Todos:
1. Implement profiler for jobs.
2. Achieve full automation (implement the client side).
4. For JobMonitors, find a good way to keep track on them, so that the system
   can be shutdown gracefully.


2012-10-25  Lipu Fei
==================================================
Fixes:
1. A critical bug in the static provisioning policy has been fixed. The bug was
   located in the method allocate(), which would pick a VMInstance for the
   selected Job. This is no correct since in the scheduler, an available
   VMInstance has already been picked.

Changes:
1. JobMonitors are now being tracked, and when scheduler is reqiured to be
   stopped, it will raise a stop signal to the running JobMonitors, and they
   will stop the Jobs that are monitoring.
2. The allocate() method in the provisioner now should occupy a VMInstance
   immediately after it is selected, because there is a provisioner thread that
   would act according to the current situation (i.e. remove idle VMInstances).
   The scheduler picks a VMInstance first, so if this picked VMInstance is
   released when the scheduler is still choosing a Job, then an error would
   occur.
3. A regular check method has been implemented for the scheduler, which removes
   all finished JobMonitors.
4. System status is regularly updated in the scheduler.

Tests:
1. Several tests have been carried out for several times, including 5 jobs with
   3 VMs, 5 jobs with 5 VMs.
2. Shutting down the system while having Jobs in execution has been tested
   for several times. The system can gracefully shutdown the Jobs, JobMonitors,
   VMAgents, and VMInstances created by the system before it is terminated.
3. The profiler for jobs has been implemented. The performance statistics is
   gathered in the JobMonitor after a Job has been finished. The current metrics
   includes: makespan, running-time, preparation-time, upload-time,
   tarball-extraction-time, execution-time, and download-time.
   More suitable metrics may be further discussed.

Todos:
1. Improve profiler for jobs.
2. Implement a central statistics database for storing system performance and
   job performance.
3. Improve the system, such as synchronization, etc.

Notes:
1. Sometime the allocation of a VM instance may fail. Then, for a provisioning
   policy like static, it may not have the specified number of VM instances.
   One solution for this is that, we can commence a regular check that makes
   sure the #VMAgents + #VMInstances = #DesiredVMInstances. So if some VMAgents
   fail to allocate a usable VMInstance, this regular check will notice this
   and create another VMAgent to allocate one, so that the total number of
   VMInstances should be the desired number.


2012-10-26  10:11  Lipu Fei
==================================================
Changes:
1. Provisioner thread has been removed.
2. The provisioner check is now a sequential method in the scheduling cycle, so
   no need to worry about concurrency problems now.
3. The updateStatus method has been moved from Scheduler to DataManager, and it
   updates the jobs' waiting times.
4. Jobs now updates its failure times when it fails or it is stopped, and
   JobMonitor will put this job back into the pending queue again.
5. The statistics MaxVMsExisting is now available.
6. The System Performance Over Time is now available.
7. A shutdown hook has been added. Now it is possible to exit with CTRL-C.

Todos:
1. Add a threshold to limit the maximum number of failures a job can have.
   Otherwise some invalid jobs would be in the pending queue forever.
2. May consider to remove JobMonitor, because there are too many threads in the
   system now.
3. The metric PreparationTime doesn't seem to be useful. Consider to remove it.


2012-10-26  11:59  Lipu Fei
==================================================
Changes:
1. Scheduler is now a subclass of Thread instead of implementing Runnable. This
   is for control convenience consideration.
2. ClientRequestListener is now a subclass of Thread instead of implementing
   Runnable. This is for control convenience consideration.
3. Now there is a timeout for each running job. The timeout is 4 minutes. This
   change is made in JobMonitor.
4. VM instances now have aggregate idle times.
5. A new metric "VM preparation time" has been added.


2012-10-26  12:42  Lipu Fei
==================================================
Changes:
1. The format of the statistics output file has been slightly changed.
2. A so-called "Simple Elastic" provisioning policy has been added. Please
   update the configuration file.

